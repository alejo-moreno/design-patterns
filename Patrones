Patrones

Categorias de patrones:
    Patrones de arquitectura:
     Como se estructuran los proyectos
        ej: Layers,MVC,EDA
    
    
    Patrones de diseño:
     Como se implementa las clases o modulos
      ej: Factory Method, Facade, Strategy, Observer
      
      Patrones creacionales:
       Son patrones que solucionan problemas de creación de objetos. Permiten encapsular y abstraer dicha creación.
        *Factory Method (Patron de diseño de creación de clase) :
         Crea una instancia de varias clases derivadas
        *Abstract Factory (Patron de diseño de creación de objeto) :
         Crea una instancia de varias familias de clases
        *Builder (Patron de diseño de creación de objeto) :
         Separa la construccion de un objeto de su representacion
        *Prototype (Patron de diseño de creación de objeto) :
         Una instancia que puede ser clonada completamente para su uso
        *Singleton (Patron de diseño de creación de objeto) :
         Una clase de la cual solo una instancia puede existir
      
      Patrones estructurales:
        Son patrones que solucionan problemas de composición (agregación) de clases y objetos        
         *Adapter
          Adapta una interfaz para que pueda ser utilizada por una clase que de otro modo no podría utilizarla.
         *Facade
          Provee de una interfaz unificada simple para acceder a una interfaz o grupo de interfaces de un subsistema.
         
    
       
        
      
      Principio Solid
       Single responsibility: La clase solo debe responder para lo que fue creada
       Open Closed: Abierta para delegar caracteristicas pero cerrada en cuanto a la abstracción
       Liskov Substitution: Poder sustituir una clase heredada por la clase base   (Perro -> Animal)
       Interface Segregation: Poder Hacer interfaces detalladas para requerimientos especificos de cliente
       Dependency Inversion: La dependencia debe ser de las clases base más no de las heredadas
      
    Idioms/Modismos
      Ventajas del lenguaje aplicado
        ej: Convenciones del lenguaje, Uso de memoria 
        
        
Bibliografia:

// Source Making Design Patterns
https://sourcemaking.com/design_patterns

//Structure and Interpretation of Computer Programs
https://mitpress.mit.edu/sicp/full-text/book/book.html

//Abstract Factory Javascript
http://www.dofactory.com/javascript/abstract-factory-design-pattern